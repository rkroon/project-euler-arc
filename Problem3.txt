(def isDivisibleBy (x y)
	(is (type (/ x y)) 'int)
)

(def isPrime (x)
	(with (xNotPrime nil i 2)
		(= xNotPrime (~odd x))
		(while (and (is xNotPrime nil) (< i x))
			(= xNotPrime (isDivisibleBy x i))
			(++ i)
		)
		(is xNotPrime nil)
	)	
)

(def getNextPrimeAfter(x)
	(with (i (+ x 1))
		(while (~isPrime i)
			(++ i)
		)
		i
	)
)

(def areFactorsOf(x . f)
	(is x (apply * f))
)

(with (primeList (cons 1 'nil) i 0)
	(while (< i 1000)
		(prn (~areFactorsOf 600851475143 (each x primeList x)))
		(= primeList (cons (getNextPrimeAfter (car primeList)) primeList))
		(++ i)
	)
)
