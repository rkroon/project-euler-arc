(def isDivisibleBy (x y)
	(is (type (/ x y)) 'int)
)

(def isPrime (x)
	(with (xNotPrime nil i 2)
		(= xNotPrime (~odd x))
		(while (and (is xNotPrime nil) (< i x))
			(= xNotPrime (isDivisibleBy x i))
			(++ i)
		)
		(is xNotPrime nil)
	)	
)

(def getNextPrimeAfter(x)
	(with (i (+ x 1))
		(while (~isPrime i)
			(++ i)
		)
		i
	)
)

(def dividedByOrNil (x y)
	(with (temp x)
		(= temp (/ x y))
		(if (is (type temp) 'int) temp)
	)
)

(def divideUnlessPrime (x primeList)
	(if (isPrime x)
		x
		(with (y 2 temp nil templist primeList i 0)
			(while (is temp nil)
				(= temp (dividedByOrNil x y))
				(prn x '/ y '= temp)
				(= y (car templist))
				(= templist (cdr templist))
				(++ i)
			)
			(divideUnlessPrime temp primeList)
		)
	)
)



(with (primeList '(1) i 0)
	(while (< i 300)
		(= primeList (cons (getNextPrimeAfter (car primeList)) primeList))
		(++ i)
	)
	(divideUnlessPrime 600851475143 primeList)
)